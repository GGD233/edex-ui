name: Build packaged binaries

on: [push, pull_request, create]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [14.x]
        arch: [amd64, arm/v7]

    steps:
    - uses: actions/checkout@v2
    - name: Setup QEMU
      uses: docker/setup-qemu-action@v1
      if: ${{ matrix.arch != 'amd64' }}
      with:
        platforms: ${{ matrix.arch }}
    - name: test arch emulation arm32v7
      if: ${{ matrix.arch == 'arm/v7' }}
      uses: docker://arm32v7/node:14-buster
      with:
        args: bash -c "uname -a && pwd && ls -a && node -v && npm -v"
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Cache Electron binaries
      uses: actions/cache@v2
      env:
        cache-name: cache-electron-bins
      with:
        # cache location is described here:
        # https://github.com/electron/get#how-it-works
        path: ~/.cache/electron
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Install system dependencies amd64 cross-build
      if: ${{ matrix.arch == 'amd64' }}
      run: |
        sudo apt update
        sudo apt install libc6-dev-i386 gcc-multilib g++-multilib
    - name: Use Node.js ${{ matrix.node-version }} on amd64
      if: ${{ matrix.arch == 'amd64' }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: install build deps
      run: npm install
    - name: run prebuild script
      run: npm run prebuild-linux
    - name: Build for x64 / ia32
      run: ./node_modules/.bin/electron-builder build -l --x64 --ia32
      if: ${{ matrix.arch == 'amd64' }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Build for armv7
      run: ./node_modules/.bin/electron-builder build -l --armv7l
      if: ${{ matrix.arch == 'arm/v7' }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/upload-artifact@v2
      with:
        name: Linux-AppImages
        path: dist/*.AppImage
        if-no-files-found: error

  build-linux-arm64:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [14.x]
        # watch out for node docker image version specified in build step below

    steps:
    - uses: actions/checkout@v2
    - name: Setup QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: arm64
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Cache Electron binaries
      uses: actions/cache@v2
      env:
        cache-name: cache-electron-bins
      with:
        # cache location is described here:
        # https://github.com/electron/get#how-it-works
        path: ~/.cache/electron
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: prebuild
      run: npm i -g npm@7 && npm install && rsync -a --info=progress2 src/ prebuild-src --exclude node_modules && node prebuild-minify.js && rm -rf node_modules
    - name: build
      uses: docker://arm64v8/node:14-buster
      with:
        args: bash -c "npm i -g npm@7 && npm install && ./node_modules/.bin/electron-builder build -l --arm64"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/upload-artifact@v2
      with:
        name: Linux-AppImages
        path: dist/*.AppImage
        if-no-files-found: error

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v1
    - name: Get npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - uses: actions/cache@v2
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Cache Electron binaries
      uses: actions/cache@v2
      env:
        cache-name: cache-electron-bins
      with:
        # cache location is described here:
        # https://github.com/electron/get#how-it-works
        path: ~/AppData/Local/electron/Cache
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: npm install
      run: |
        npm install
    - name: npm build
      run: |
        npm run build-windows
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/upload-artifact@v2
      with:
        name: Windows-Installer
        path: dist/*.exe
        if-no-files-found: error

  build-darwin:
    runs-on: macos-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v1
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Cache Electron binaries
      uses: actions/cache@v2
      env:
        cache-name: cache-electron-bins
      with:
        # cache location is described here:
        # https://github.com/electron/get#how-it-works
        path: ~/Library/Caches/electron
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: set up env
      run: |
        npm install
    - name: npm build
      run: |
        npm run build-darwin
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/upload-artifact@v2
      with:
        name: MacOS-Image
        path: dist/*.dmg
        if-no-files-found: error
